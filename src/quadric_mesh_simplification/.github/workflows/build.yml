name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push'
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]

    steps:
      - uses: actions/checkout@v2

      - name: Install Visual C++ for Python 2.7
        if: runner.os == 'Windows'
        run: choco install vcpython27 -f -y

      - name: Build wheels
        uses: joerick/cibuildwheel@v1.9.0
        env:
          CIBW_SKIP: pp*

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.6'

      - name: install deps
        run: "pip install --only-binary=:all: cython numpy"

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push'
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'- uses: actions/checkout@v2
    steps:
      # Sets up python
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: wheelhouse

      # Install dependencies
      - name: "Installs dependencies"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install twine

      # Build and upload to PyPI
      - name: "Builds and uploads to PyPI"
        run: |
          python3 -m twine upload -u __token__ -p $TWINE_PASSWORD -r quad-mesh-simplify dist/*
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
